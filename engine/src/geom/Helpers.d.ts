import { IBounds, IRectangle, IPoint, IPolygon } from './IGeom';
export declare class PointHit {
    parentID: number;
    pt: IPoint;
    angle: number;
    dist: number;
    type: number;
    constructor(origin: IPoint, hitPoint: IPoint, parentID?: number, type?: number);
    static sort(ptHits: Array<PointHit>): void;
    clone(): PointHit;
}
export declare const SHAPE_ORTHO = 0;
export declare const SHAPE_ROUND = 1;
export declare const HIT_TYPE_SHAPE = 2;
export declare const HIT_TYPE_SEGMENT = 3;
export declare function pointWithinBounds(x: number, y: number, b: IBounds): boolean;
export declare function boundsWithinBounds(bA: IBounds, bB: IBounds): boolean;
export declare function boundsIntersect(bA: IBounds, bB: IBounds, useShapes?: boolean): boolean;
export declare function pointWithinRectangle(x: number, y: number, rect: IRectangle, tilescale?: number): boolean;
export declare function rectangleWithinRectangle(rectA: IRectangle, rectB: IRectangle): boolean;
export declare function rectIntersectsRect(rectA: IRectangle, rectB: IRectangle): boolean;
export declare function distanceBetween(x1: number, y1: number, x2: number, y2: number): number;
export declare function distanceBetweenSquared(x1: number, y1: number, x2: number, y2: number): number;
export declare function angleBetween(x1: number, y1: number, x2: number, y2: number): number;
export declare function xyToAngle(x: number, y: number): number;
export declare function orthoRoundBoundsIntersect(bA: IBounds, bB: IBounds): boolean;
export declare function rotatePointDeg(pt: IPoint, deg: number): void;
export declare function rotatePoint(pt: IPoint, angle: number): void;
export declare function scalePoint(pt: IPoint, scale: number): void;
export declare function lerp(a: number, b: number, t: number): number;
export declare function lerpDist(x1: number, y1: number, x2: number, y2: number, dist: number): IPoint;
export declare function normalizePoint(pt: IPoint, scale?: number): void;
export declare function maxPoint(pt: IPoint, min: number): void;
export declare function normalizeAngle(ang: number): number;
export declare function normalizeAngleDeg(ang: number): number;
export declare function dot(ptA: IPoint, ptB: IPoint): number;
export declare function length(pt: IPoint): number;
export declare function cross(ptA: IPoint, ptB: IPoint): number;
export declare function sub(ptA: IPoint, ptB: IPoint): IPoint;
export declare function add(ptA: IPoint, ptB: IPoint): IPoint;
export declare function closestPtPointLine(ptC: IPoint, ptA: IPoint, ptB: IPoint): IPoint;
export declare function ccw(p1x: number, p1y: number, p2x: number, p2y: number, p3x: number, p3y: number): boolean;
export declare function lineIntersectsLine(p1x: number, p1y: number, p2x: number, p2y: number, p3x: number, p3y: number, p4x: number, p4y: number): boolean;
export declare function lineLineIntersect(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): IPoint;
export declare function lineSide(x: number, y: number, x1: number, y1: number, x2: number, y2: number): number;
export declare function boundsLineIntersect(b: IBounds, segPtA: IPoint, segPtB: IPoint): Array<IPoint>;
export declare function circleLineIntersect(bnds: IBounds, segPtA: IPoint, segPtB: IPoint): Array<IPoint>;
export declare function rectLineIntersect(b: IBounds, segPtA: IPoint, segPtB: IPoint, side?: number): Array<IPoint>;
export declare function cellCoordsAlongLine(x0: number, y0: number, x1: number, y1: number, gridSize?: number, intoArr?: Array<IPoint>): Array<IPoint>;
export declare function cellCoordsAlongLineWithThickness(x0: number, y0: number, x1: number, y1: number, gridSize?: number, thickness?: number, intoArr?: Array<IPoint>): Array<IPoint>;
export declare function cellCoordsContainingPolygon(poly: IPolygon, gridSize: number, padding?: number): Array<IPoint>;
export declare function cellCoordsIntersectingCircle(center: IPoint, radius: number, gridSize: number): Array<IPoint>;
export declare function polygonArea(pts: Array<IPoint>): number;
export declare function polygonIsClockwise(pts: Array<IPoint>): boolean;
export declare function linePolygonIntersect(linePtA: IPoint, linePtB: IPoint, poly: IPolygon): Array<IPoint>;
export declare function pointInPolygon(pt: IPoint, poly: IPolygon): boolean;
export declare function polygonInPolygon(polyA: IPolygon, polyB: IPolygon): boolean;
export declare function resolvePenetrationBetweenBounds(): void;
export declare function getPenetrationSegmentRound(): void;
